// anon.pest

// --- Basic Tokens ---

NEWLINE = { "\r\n" | "\n" }
SPACE = @{ " " }
TAB = @{ "\t" }
_INLINE_WHITESPACE = _{ (SPACE | TAB)+ }
_MAYBE_INLINE_WHITESPACE = _{ (SPACE | TAB)* }
_COMMENT_CHAR = { (!("\r\n" | "\n")) ~ ANY }
_LINE_COMMENT = _{ "--" ~ _COMMENT_CHAR* }

// The optional rules
//WHITESPACE = _{ " " | "\t" }
COMMENT = _{ _LINE_COMMENT }

// --- Atomic Tokens ---

// Keywords
KW_LET = {"let"}
KW_IN = {"in"}
KW_IF = {"if"}
KW_THEN = {"then"}
KW_ELSE = {"else"}
KW_MATCH = {"match"}
KW_CASE = {"case"}
KW_IMPORT = {"import"}
KW_EXPORT = {"export"}
KW_CLASS = {"class"}
KW_INSTANCE = {"instance"}
KW_DATA = {"data"}
KW_TYPE = {"type"}

// Identifiers
IDENT = @{ ("_" | ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")* }

// Operators
OP_ADD = {"+"}
OP_MUL = {"*"}
OP_NEG = {"-"}
OP_DIV = {"/"}
OP_EQ = {"="}

// Delimiters
DELIMITER_LPAREN = {"("}
DELIMITER_RPAREN = {")"}
DELIMITER_COMMA = {","}
DELIMITER_ANNOTATE = {"::"}
DELIMITER_UNDERSCORE = {"_"}

// 4. Literals
FLOAT = @{ ("-"?) ~ (ASCII_DIGIT+) ~ (".") ~ (ASCII_DIGIT+)}
INTEGER = @{("-"?) ~ ASCII_DIGIT+ }

// 字符字面量内容：不是反斜杠，也不是单引号，也不是换行符
_CHAR_INNER = { !("'" | "\\" | NEWLINE) ~ ANY }
// 转义字符：反斜杠后面跟任何字符
_ESCAPED_CHAR = { "\\" ~ ANY }
CHARACTER = { "'" ~ (_CHAR_INNER | _ESCAPED_CHAR) ~ "'" }

// 字符串字面量内容：不是反斜杠，不是双引号，也不是换行符
_STRING_CONTENT_CHAR = { !("\"" | "\\" | NEWLINE) ~ ANY }
// 转义序列：反斜杠后面跟任何字符
_STRING_ESCAPE = { "\\" ~ ANY }
STRING = { "\"" ~ (_STRING_CONTENT_CHAR | _STRING_ESCAPE)* ~ "\"" }

// --- Atom --- 
ATOM = {
    KW_CASE | KW_CLASS | KW_ELSE | KW_EXPORT | KW_IF |
    KW_IMPORT | KW_IN | KW_INSTANCE | KW_LET | KW_MATCH | KW_THEN | 
    KW_DATA | KW_TYPE |
    OP_ADD | OP_DIV | OP_EQ | OP_MUL | OP_NEG |
    DELIMITER_LPAREN | DELIMITER_RPAREN | DELIMITER_ANNOTATE |
    DELIMITER_UNDERSCORE | 
    FLOAT | INTEGER | CHARACTER | STRING |
    IDENT
}

INDENT  = @{ (" " | "\t")+ } 

// --- File Structure ---
LINE = { INDENT? ~ (ATOM ~ (_INLINE_WHITESPACE*))* ~ _LINE_COMMENT? ~ NEWLINE }

File = { LINE* ~ EOI }