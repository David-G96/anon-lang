// anon.pest

// --- Basic Tokens ---

NEWLINE = { "\r\n" | "\n" }
SPACE = { " " }
TAB = { "\t" }
_INLINE_WHITESPACE = { (SPACE | TAB)+ }
_COMMENT_CHAR = { !("\r" | "\n") ~ ANY }
_LINE_COMMENT = _{ "--" ~ _COMMENT_CHAR* }

// --- Atomic Tokens ---

WILDCARD = { "_" }

// 1. Keywords
KW_LET = {"let"}
KW_IN = {"in"}
KW_IF = {"if"}
KW_THEN = {"then"}
KW_ELSE = {"else"}
KW_MATCH = {"match"}
KW_CASE = {"case"}
KW_IMPORT = {"import"}
KW_EXPORT = {"export"}
KW_CLASS = {"class"}
KW_INSTANCE = {"instance"}
KW_ANNOTATE = {"::"}
KW_EQ = {"="}

// 2. Identifiers
IDENT = { ("_" | ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")* }

// 3. Operators
OP_ADD = {"+"}
OP_MUL = {"*"}
// DELIMITER_EQ = {"="}
DELIMITER_LPAREN = {"("}
DELIMITER_RPAREN = {")"}

// 4. Literals
FLOAT = { ("-"?) ~ (ASCII_DIGIT+) ~ (".") ~ (ASCII_DIGIT+)}
INTEGER = {("-"?) ~ ASCII_DIGIT+ }

// 字符字面量内容：不是反斜杠，也不是单引号，也不是换行符
_CHAR_INNER = { !("'" | "\\" | NEWLINE) ~ ANY }
// 转义字符：反斜杠后面跟任何字符
_ESCAPED_CHAR = { "\\" ~ ANY }
CHARACTER = { "'" ~ (_CHAR_INNER | _ESCAPED_CHAR) ~ "'" }

// 字符串字面量内容：不是反斜杠，不是双引号，也不是换行符
_STRING_CONTENT_CHAR = { !("\"" | "\\" | NEWLINE) ~ ANY }
// 转义序列：反斜杠后面跟任何字符
_STRING_ESCAPE = { "\\" ~ ANY }
STRING = { "\"" ~ (_STRING_CONTENT_CHAR | _STRING_ESCAPE)* ~ "\"" }

// --- Atom --- 
ATOM = {
    KW_ANNOTATE | KW_CASE | KW_CLASS | KW_ELSE | KW_EXPORT | KW_IF |
    KW_IMPORT | KW_IN | KW_INSTANCE | KW_LET | KW_MATCH | KW_THEN | 
    KW_EQ |
    // DELIMITER_EQ 
    DELIMITER_LPAREN | DELIMITER_RPAREN |
    FLOAT | INTEGER | CHARACTER | STRING |
    IDENT
}

// --- File Structure ---
LINE = { (SPACE | TAB)* ~ ATOM* ~ _LINE_COMMENT? ~ NEWLINE }

File = { SOI ~ LINE* ~ EOI }